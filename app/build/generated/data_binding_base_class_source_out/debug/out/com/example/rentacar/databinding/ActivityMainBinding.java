// Generated by view binder compiler. Do not edit!
package com.example.rentacar.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.rentacar.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Chip balanceChip;

  @NonNull
  public final TextView carDailyCost;

  @NonNull
  public final ImageView carImage;

  @NonNull
  public final TextView carKm;

  @NonNull
  public final TextView carModelYear;

  @NonNull
  public final TextView carName;

  @NonNull
  public final RatingBar carRating;

  @NonNull
  public final TextView carRatingText;

  @NonNull
  public final TextView emptyStateText;

  @NonNull
  public final ImageButton favoriteButton;

  @NonNull
  public final RecyclerView favoritesRecyclerView;

  @NonNull
  public final MaterialButton nextButton;

  @NonNull
  public final MaterialButton rentButton;

  @NonNull
  public final TextInputEditText searchEditText;

  @NonNull
  public final MaterialButton sortButton;

  @NonNull
  public final SwitchMaterial themeSwitch;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView, @NonNull Chip balanceChip,
      @NonNull TextView carDailyCost, @NonNull ImageView carImage, @NonNull TextView carKm,
      @NonNull TextView carModelYear, @NonNull TextView carName, @NonNull RatingBar carRating,
      @NonNull TextView carRatingText, @NonNull TextView emptyStateText,
      @NonNull ImageButton favoriteButton, @NonNull RecyclerView favoritesRecyclerView,
      @NonNull MaterialButton nextButton, @NonNull MaterialButton rentButton,
      @NonNull TextInputEditText searchEditText, @NonNull MaterialButton sortButton,
      @NonNull SwitchMaterial themeSwitch, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.balanceChip = balanceChip;
    this.carDailyCost = carDailyCost;
    this.carImage = carImage;
    this.carKm = carKm;
    this.carModelYear = carModelYear;
    this.carName = carName;
    this.carRating = carRating;
    this.carRatingText = carRatingText;
    this.emptyStateText = emptyStateText;
    this.favoriteButton = favoriteButton;
    this.favoritesRecyclerView = favoritesRecyclerView;
    this.nextButton = nextButton;
    this.rentButton = rentButton;
    this.searchEditText = searchEditText;
    this.sortButton = sortButton;
    this.themeSwitch = themeSwitch;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.balance_chip;
      Chip balanceChip = ViewBindings.findChildViewById(rootView, id);
      if (balanceChip == null) {
        break missingId;
      }

      id = R.id.car_daily_cost;
      TextView carDailyCost = ViewBindings.findChildViewById(rootView, id);
      if (carDailyCost == null) {
        break missingId;
      }

      id = R.id.car_image;
      ImageView carImage = ViewBindings.findChildViewById(rootView, id);
      if (carImage == null) {
        break missingId;
      }

      id = R.id.car_km;
      TextView carKm = ViewBindings.findChildViewById(rootView, id);
      if (carKm == null) {
        break missingId;
      }

      id = R.id.car_model_year;
      TextView carModelYear = ViewBindings.findChildViewById(rootView, id);
      if (carModelYear == null) {
        break missingId;
      }

      id = R.id.car_name;
      TextView carName = ViewBindings.findChildViewById(rootView, id);
      if (carName == null) {
        break missingId;
      }

      id = R.id.car_rating;
      RatingBar carRating = ViewBindings.findChildViewById(rootView, id);
      if (carRating == null) {
        break missingId;
      }

      id = R.id.car_rating_text;
      TextView carRatingText = ViewBindings.findChildViewById(rootView, id);
      if (carRatingText == null) {
        break missingId;
      }

      id = R.id.empty_state_text;
      TextView emptyStateText = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateText == null) {
        break missingId;
      }

      id = R.id.favorite_button;
      ImageButton favoriteButton = ViewBindings.findChildViewById(rootView, id);
      if (favoriteButton == null) {
        break missingId;
      }

      id = R.id.favorites_recycler_view;
      RecyclerView favoritesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (favoritesRecyclerView == null) {
        break missingId;
      }

      id = R.id.next_button;
      MaterialButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.rent_button;
      MaterialButton rentButton = ViewBindings.findChildViewById(rootView, id);
      if (rentButton == null) {
        break missingId;
      }

      id = R.id.search_edit_text;
      TextInputEditText searchEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchEditText == null) {
        break missingId;
      }

      id = R.id.sort_button;
      MaterialButton sortButton = ViewBindings.findChildViewById(rootView, id);
      if (sortButton == null) {
        break missingId;
      }

      id = R.id.theme_switch;
      SwitchMaterial themeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (themeSwitch == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, balanceChip, carDailyCost,
          carImage, carKm, carModelYear, carName, carRating, carRatingText, emptyStateText,
          favoriteButton, favoritesRecyclerView, nextButton, rentButton, searchEditText, sortButton,
          themeSwitch, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
